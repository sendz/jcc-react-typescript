/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { initializeApp } from "firebase/app";
import { getMessaging, getToken } from "firebase/messaging";


declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

const VAPID_KEY = 'VAPID_KEY'
const firebaseConfig = {
  apiKey: "AIzaSyADLNdtomoZyrjjZMNKImXBSgDX1uGiAqs",
  authDomain: "jabar-cc.firebaseapp.com",
  projectId: "jabar-cc",
  storageBucket: "jabar-cc.appspot.com",
  messagingSenderId: "710064399975",
  appId: "1:710064399975:web:11a2e31134d9e334a2d6c2"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

const messaging = getMessaging()

getToken(messaging, {vapidKey: VAPID_KEY}).then(token => {console.log('TOKEN', token.toString())})

const cacheName = 'jcc-v0.0.2'

self.addEventListener('install', (event) => {
  event.waitUntil((async () => {
    const cache = await caches.open(cacheName)
    await cache.addAll(['offline.html'])
  })())
})

self.addEventListener('fetch', (event: any) => {
  console.log("FETCH INTERCEPT", event.request)
  if (event.request.mode === "navigate") {
    event.respondWith((async () => {
      try {
        const preload = await event.preloadResponse
        if (preload) {
          return preload
        }
        const networkResponse = await fetch(event.request)
        return networkResponse
      } catch (error: any) {
        const cache = await caches.open(cacheName)
        const cachedResponse = await cache.match('offline.html')
        return cachedResponse
      }
    })())
  }
  event.respondWith((async () => {
    
    const cacheResponse = await caches.match(event.request)
      if (cacheResponse) {
          return cacheResponse
      }
      const response = await fetch(event.request)
      const cache = await caches.open(cacheName)
      console.log('[Service Worker] Caching resource: ', event.request.url)
      cache.put(event.request, response.clone())
      return response
  })())
})

self.addEventListener('push', (event) => {
  const notificationBody = event.data?.text() || "No payload"
  console.log("PUSH", notificationBody)
  var options = {
    body: notificationBody,
    icon: './logo192.png',
    actions: [
      {
        action: 'explore', title: 'Ngobrol lagi'
      },
      {
        action: 'close', title: 'Tutup'
      }
    ]
  }
  event.waitUntil(
    self.registration.showNotification('Halo JCC Perjuangan', options)
  )
})

// Any other custom service worker logic can go here.
